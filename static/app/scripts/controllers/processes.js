// Generated by CoffeeScript 1.7.1
(function() {
  var controller;

  controller = function(scope, ParseCrud, ngTableParams, http, Alert) {
    var Documents, Processes, Uploads, WordsLists, onError, removeFile, saveSuccess;
    scope.data = [];
    scope.selected = 'new';
    scope.entity = {};
    scope.files = {};

    Documents = new ParseCrud('Documents');
    Documents.list(function(d) {
      return scope.documents = d;
    });
    WordsLists = new ParseCrud('WordsLists');
    WordsLists.list(function(d) {
      return scope.wordslists = d;
    });
    Processes = new ParseCrud('Processes');
    Processes.listWith(['wordslist', 'documents'], function(d) {
      scope.data = d;
      return scope.tableParams.reload();
    });
    Uploads = new ParseCrud('DocumentUpload');
    scope.save = function() {
      var doProcess;
      doProcess = _.after(2, function() {
        var h, params;
        Alert.warn('Processing is in progress, please, be patient.');
        params = {
          method: 'POST',
          url: '/analyzefiles',
          data: scope.files
        };
        h = http(params);
        h.success(function(d) {
          scope.entity.result = d.result.categories;
          console.log(d.result.categories);
          Processes.save(scope.entity, saveSuccess, onError);
          scope.tableParams.reload();
          return Alert.success('Processed successfully.');
        });
        return h.error(function(e) {
          Alert.success('Error occured.');
          return console.log(e);
        });
      });
      scope.entity.documents.get('uploadedDocument').fetch({
        success: function(documentFile) {
          return scope.$apply(function() {
            scope.files.document = documentFile.get('uploadname');
            return doProcess();
          });
        }
      });
      return scope.entity.wordslist.get('uploadedDocument').fetch({
        success: function(wordsFile) {
          return scope.$apply(function() {
            scope.files.words = wordsFile.get('uploadname');
            return doProcess();
          });
        },
        error: function(err) {
          return console.log("err");
        }
      });
    };
    scope.visualize = function(wordslist) {
      return wordslist.get('uploadedDocument').fetch({
        success: function(documentFile) {
          var h, name, params, uploadname;
          uploadname = documentFile.get('uploadname');
          name = wordslist.get('name');
          params = {
            method: 'Get',
            url: '/visualize-wordslist?name=' + name + '&uploadname=' + uploadname
          };
          h = http(params);
          h.success(function(d) {

            console.log(JSON.stringify(d));


              var margin = {top: 20, right: 120, bottom: 20, left: 120},
  width = 960 - margin.right - margin.left,
  height = 500 - margin.top - margin.bottom;  
      
    var i = 0,
        duration = 750,
        root;

    var tree = d3.layout.tree()
        .size([height, width]);

    var diagonal = d3.svg.diagonal()
        .projection(function(d) { return [d.y, d.x]; });


    var svg = d3.select(".visualize").append("svg")
              .attr("width", width + margin.right + margin.left)
              .attr("height", height + margin.top + margin.bottom)
            .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");






            flare = d;

            
              root = flare;
              root.x0 = height / 2;
              root.y0 = 0;

              function collapse(d) {
                if (d.children) {
                  d._children = d.children;
                  d._children.forEach(collapse);
                  d.children = null;
                }
              }

              root.children.forEach(collapse);
              update(root);
              
        









    d3.select(self.frameElement).style("height", "800px");

    //function update(source) {
      function update(source){

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
            links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function(d) { d.y = d.depth * 180; });

        // Update the nodes…
        var node = svg.selectAll("g.node")
            .data(nodes, function(d) { return d.id || (d.id = ++i); });

        // Enter any new nodes at the parent's previous position.
        var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
            .on("click", click);

        nodeEnter.append("circle")
            .attr("r", 1e-6)
            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

        nodeEnter.append("text")
            .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
            .attr("dy", ".35em")
            .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
            .text(function(d) { return d.name; })
            .style("fill-opacity", 1e-6);

        // Transition nodes to their new position.
        var nodeUpdate = node.transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

        nodeUpdate.select("circle")
            .attr("r", 4.5)
            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

        nodeUpdate.select("text")
            .style("fill-opacity", 1);

        // Transition exiting nodes to the parent's new position.
        var nodeExit = node.exit().transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
            .remove();

        nodeExit.select("circle")
            .attr("r", 1e-6);

        nodeExit.select("text")
            .style("fill-opacity", 1e-6);

        // Update the links…
        var link = svg.selectAll("path.link")
            .data(links, function(d) { return d.target.id; });

        // Enter any new links at the parent's previous position.
        link.enter().insert("path", "g")
            .attr("class", "link")
            .attr("d", function(d) {
              var o = {x: source.x0, y: source.y0};
              return diagonal({source: o, target: o});
            });

        // Transition links to their new position.
        link.transition()
            .duration(duration)
            .attr("d", diagonal);

        // Transition exiting nodes to the parent's new position.
        link.exit().transition()
            .duration(duration)
            .attr("d", function(d) {
              var o = {x: source.x, y: source.y};
              return diagonal({source: o, target: o});
            })
            .remove();

        // Stash the old positions for transition.
        nodes.forEach(function(d) {
          d.x0 = d.x;
          d.y0 = d.y;
        });
      }

    // Toggle children on click.
    function click(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
      update(d);
    }










            return console.log(d);
          });
          return h.error(function(e) {
            return console.log(e);
          });
        }
      });
    };
    scope.get = function(parseObj, attr) {
      if (attr == null) {
        attr = 'name';
      }
      return parseObj.fetch({
        success: function(obj) {
          return obj.get(attr);
        }
      });
    };
    saveSuccess = function(e) {
      return scope.$apply(function() {
        scope.data.push(e);
        scope.tableParams.reload();
        scope.selected = 'list';
        return Alert.success('Process information was saved successfully.');
      });
    };
    onError = function(e) {
      return scope.$apply(function() {
        console.log(e);
        return Alert.error('Error occured while saving process information.');
      });
    };
    removeFile = function(name) {
      var h, params;
      params = {
        method: 'POST',
        url: '/remove',
        data: {
          filename: name
        }
      };
      h = http(params);
      h.success(function(d) {
        return scope.$apply(function() {
          Alert.success('Removed successfully.');
          return scope.tableParams.reload();
        });
      });
      return h.error(function(e) {
        return scope.$apply(function() {
          return Alert.error(e);
        });
      });
    };
    scope.remove = function(entity) {
      return entity.destroy({
        success: function() {
          return scope.$apply(function() {
            Alert.success('Removed successfully.');
            scope.data = _.filter(scope.data, function(d) {
              return d.id !== entity.id;
            });
            return scope.tableParams.reload();
          });
        },
        error: function(e) {
          console.log(e);
          return scope.$apply(function() {
            return Alert.error('Error occurred while removing.');
          });
        }
      });
    };
    return scope.tableParams = new ngTableParams({
      page: 1,
      count: 10
    }, {
      total: function() {
        return scope.data.length;
      },
      getData: function($defer, params) {
        return $defer.resolve(scope.data.slice((params.page() - 1) * params.count(), params.page() * params.count()));
      }
    });
  };









  














  angular.module('wordsApp').controller('ProcessesCtrl', ['$scope', 'ParseCrud', 'ngTableParams', '$http', 'Alert', controller]);

}).call(this);
