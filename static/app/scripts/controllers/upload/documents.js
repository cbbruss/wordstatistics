// Generated by CoffeeScript 1.6.3
(function() {
  var controller;

  controller = function(scope, params, ParseCrud, timeout, http, ngTableParams) {
    var DocumentUpload, id, removeFile, saveError, saveSuccess, uploader;
    id = params.id;
    scope.id = params.id;
    scope.text = '';
    scope.entity = {};
    scope.success = '';
    scope.errors = [];
    scope.data = [];
    scope.selected = 'upload';
    DocumentUpload = new ParseCrud('DocumentUpload');
    DocumentUpload.list(function(d) {
      scope.data = d;
      return scope.tableParams.reload();
    });
    removeFile = function(name) {
      var h;
      params = {
        method: 'POST',
        url: '/removeupload',
        data: {
          filename: name
        }
      };
      h = http(params);
      h.success(function(d) {
        scope.success = 'Removed successfully.';
        return scope.tableParams.reload();
      });
      return h.error(function(e) {
        scope.success = '';
        return scope.error = e;
      });
    };
    scope.remove = function(e) {
      var filename, removeSuccess;
      filename = e.get('filename');
      removeSuccess = function(e) {
        scope.data = _.filter(scope.data, function(d) {
          return d.id !== e.id;
        });
        return removeFile(filename);
      };
      return Service.remove(e, removeSuccess);
    };
    scope.tableParams = new ngTableParams({
      page: 1,
      count: 10
    }, {
      total: function() {
        return scope.data.length;
      },
      getData: function($defer, params) {
        return $defer.resolve(scope.data.slice((params.page() - 1) * params.count(), params.page() * params.count()));
      }
    });
    uploader = new plupload.Uploader({
      browse_button: "browse",
      url: "/upload",
      filters: {
        mime_types: [
          {
            title: "Text files",
            extensions: "txt"
          }
        ]
      }
    });
    uploader.init();
    scope.filesAdded = [];
    uploader.bind("FilesAdded", function(up, files) {
      return scope.$apply(function() {
        return plupload.each(files, function(file) {
          return scope.filesAdded.push(file);
        });
      });
    });
    saveSuccess = function(e) {
      scope.data.push(e);
      scope.tableParams.reload();
      return scope.$apply(function() {
        return scope.selected = 'uploaded';
      });
    };
    saveError = function() {
      debugger;
    };
    uploader.bind('FileUploaded', function(up, file, xhr) {
      var obj, res;
      res = JSON.parse(xhr.response);
      obj = {
        filename: file.name,
        uploadname: res.result
      };
      return DocumentUpload.save(obj, saveSuccess, saveError);
    });
    uploader.bind('UploadComplete', function(up, file) {
      return scope.$apply(function() {
        return scope.filesAdded.length = 0;
      });
    });
    uploader.bind('UploadProgress', function(up, file) {
      return scope.$apply(function() {
        var matches;
        matches = _.filter(scope.filesAdded, function(f) {
          return f.id === file.id;
        });
        return matches[0].percent = file.percent;
      });
    });
    uploader.bind('Error', function(up, err) {
      return scope.$apply(function() {
        var res;
        res = JSON.parse(err.response);
        return scope.errors.push(res != null ? res.result : void 0);
      });
    });
    return scope.upload = function() {
      scope.errors.length = 0;
      return uploader.start();
    };
  };

  angular.module('wordsApp').controller('UploadDocumentsCtrl', ['$scope', '$routeParams', 'ParseCrud', '$timeout', '$http', 'ngTableParams', controller]);

}).call(this);

/*
//@ sourceMappingURL=documents.map
*/
